{"ast":null,"code":"var _jsxFileName = \"/Users/timothykim/coding-projects/server/client/src/components/Payments.js\";\nimport React, { Component } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport getStripe from './GetStripe';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Payments extends Component {\n  render() {\n    /*\n    return (\n    <StripeCheckout \n      name = \"FeedbackFusion\"\n      description = \"$5 for 5 email credits\"\n      amount = {500}\n      token = {token => this.props.handleToken(token)}\n      stripeKey = {process.env.REACT_APP_STRIPE_KEY}\n    >\n      <button className = \"btn\"> \n          Add Credits\n      </button>\n    </StripeCheckout>\n               // materialize ui css (className)\n    );*/\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: handleCheckout,\n      children: \"Add Credits\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  }\n}\n// UNCOMMENT TO USE NEW PAYMENT METHOD!!!!\nasync function handleCheckout() {\n  const stripe = await getStripe();\n  const {\n    error\n  } = await stripe.redirectToCheckout({\n    lineItems: [{\n      price: process.env.REACT_APP_PROD_KEY,\n      quantity: 1\n    }],\n    mode: 'payment',\n    successUrl: `http://localhost:3000/success`,\n    cancelUrl: `http://localhost:3000/cancel`\n    //customerEmail: 'customer@email.com',\n  });\n\n  const stripeTokenHandler = token => {\n    // Insert the token ID into the form so it gets submitted to the server\n    const form = document.getElementById('payment-form');\n    const hiddenInput = document.createElement('input');\n    hiddenInput.setAttribute('type', 'hidden');\n    hiddenInput.setAttribute('name', 'stripeToken');\n    hiddenInput.setAttribute('value', token.id);\n    form.appendChild(hiddenInput);\n\n    // Submit the form\n    form.submit();\n  };\n  const form = document.getElementById('payment-form');\n  form.addEventListener('submit', async event => {\n    event.preventDefault();\n    const {\n      token,\n      error\n    } = await stripe.createToken(card);\n    if (error) {\n      // Inform the customer that there was an error.\n      const errorElement = document.getElementById('card-errors');\n      errorElement.textContent = error.message;\n    } else {\n      // Send the token to your server.\n      stripeTokenHandler(token);\n    }\n  });\n  console.warn(error.message);\n}\nexport default connect(null, actions)(Payments);","map":{"version":3,"names":["React","Component","StripeCheckout","getStripe","connect","actions","jsxDEV","_jsxDEV","Payments","render","className","onClick","handleCheckout","children","fileName","_jsxFileName","lineNumber","columnNumber","stripe","error","redirectToCheckout","lineItems","price","process","env","REACT_APP_PROD_KEY","quantity","mode","successUrl","cancelUrl","stripeTokenHandler","token","form","document","getElementById","hiddenInput","createElement","setAttribute","id","appendChild","submit","addEventListener","event","preventDefault","createToken","card","errorElement","textContent","message","console","warn"],"sources":["/Users/timothykim/coding-projects/server/client/src/components/Payments.js"],"sourcesContent":["import React, { Component } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport getStripe from './GetStripe';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n\nclass Payments extends Component {\n    render() {/*\n        return (\n            <StripeCheckout \n                name = \"FeedbackFusion\"\n                description = \"$5 for 5 email credits\"\n                amount = {500}\n                token = {token => this.props.handleToken(token)}\n                stripeKey = {process.env.REACT_APP_STRIPE_KEY}\n            >\n                <button className = \"btn\"> \n                    Add Credits\n                </button>\n            </StripeCheckout>\n            \n            // materialize ui css (className)\n        );*/\n        return <button className = \"btn\" onClick={handleCheckout}>Add Credits</button>;\n    }\n}\n// UNCOMMENT TO USE NEW PAYMENT METHOD!!!!\nasync function handleCheckout() {\n    const stripe = await getStripe();\n    const { error } = await stripe.redirectToCheckout({\n      lineItems: [\n        {\n          price: process.env.REACT_APP_PROD_KEY,\n          quantity: 1,\n        },\n      ],\n      mode: 'payment',\n      successUrl: `http://localhost:3000/success`,\n      cancelUrl: `http://localhost:3000/cancel`,\n      //customerEmail: 'customer@email.com',\n    });\n\n\n    const stripeTokenHandler = (token) => {\n        // Insert the token ID into the form so it gets submitted to the server\n        const form = document.getElementById('payment-form');\n        const hiddenInput = document.createElement('input');\n        hiddenInput.setAttribute('type', 'hidden');\n        hiddenInput.setAttribute('name', 'stripeToken');\n        hiddenInput.setAttribute('value', token.id);\n        form.appendChild(hiddenInput);\n      \n        // Submit the form\n        form.submit();\n      }\n      \n    const form = document.getElementById('payment-form');\nform.addEventListener('submit', async (event) => {\n  event.preventDefault();\n\n  const {token, error} = await stripe.createToken(card);\n\n  if (error) {\n    // Inform the customer that there was an error.\n    const errorElement = document.getElementById('card-errors');\n    errorElement.textContent = error.message;\n  } else {\n    // Send the token to your server.\n    stripeTokenHandler(token);\n  }\n});\n\n    console.warn(error.message);\n}\n\nexport default connect(null, actions) (Payments);\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,cAAc,MAAM,uBAAuB;AAClD,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAO,KAAKC,OAAO,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,QAAQ,SAASP,SAAS,CAAC;EAC7BQ,MAAMA,CAAA,EAAG;IAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEQ,oBAAOF,OAAA;MAAQG,SAAS,EAAG,KAAK;MAACC,OAAO,EAAEC,cAAe;MAAAC,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAClF;AACJ;AACA;AACA,eAAeL,cAAcA,CAAA,EAAG;EAC5B,MAAMM,MAAM,GAAG,MAAMf,SAAS,CAAC,CAAC;EAChC,MAAM;IAAEgB;EAAM,CAAC,GAAG,MAAMD,MAAM,CAACE,kBAAkB,CAAC;IAChDC,SAAS,EAAE,CACT;MACEC,KAAK,EAAEC,OAAO,CAACC,GAAG,CAACC,kBAAkB;MACrCC,QAAQ,EAAE;IACZ,CAAC,CACF;IACDC,IAAI,EAAE,SAAS;IACfC,UAAU,EAAG,+BAA8B;IAC3CC,SAAS,EAAG;IACZ;EACF,CAAC,CAAC;;EAGF,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;IAClC;IACA,MAAMC,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;IACpD,MAAMC,WAAW,GAAGF,QAAQ,CAACG,aAAa,CAAC,OAAO,CAAC;IACnDD,WAAW,CAACE,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC1CF,WAAW,CAACE,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC;IAC/CF,WAAW,CAACE,YAAY,CAAC,OAAO,EAAEN,KAAK,CAACO,EAAE,CAAC;IAC3CN,IAAI,CAACO,WAAW,CAACJ,WAAW,CAAC;;IAE7B;IACAH,IAAI,CAACQ,MAAM,CAAC,CAAC;EACf,CAAC;EAEH,MAAMR,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;EACxDF,IAAI,CAACS,gBAAgB,CAAC,QAAQ,EAAE,MAAOC,KAAK,IAAK;IAC/CA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,MAAM;MAACZ,KAAK;MAAEZ;IAAK,CAAC,GAAG,MAAMD,MAAM,CAAC0B,WAAW,CAACC,IAAI,CAAC;IAErD,IAAI1B,KAAK,EAAE;MACT;MACA,MAAM2B,YAAY,GAAGb,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;MAC3DY,YAAY,CAACC,WAAW,GAAG5B,KAAK,CAAC6B,OAAO;IAC1C,CAAC,MAAM;MACL;MACAlB,kBAAkB,CAACC,KAAK,CAAC;IAC3B;EACF,CAAC,CAAC;EAEEkB,OAAO,CAACC,IAAI,CAAC/B,KAAK,CAAC6B,OAAO,CAAC;AAC/B;AAEA,eAAe5C,OAAO,CAAC,IAAI,EAAEC,OAAO,CAAC,CAAEG,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}